<div class="col-md-8 col-md-offset-2">
  <%= form_for [:admins, @user], :html => { :class => "form-horizontal user" }, :url => update_users_admins_user_path, method: "patch" do |f| %>

    <% if @user.errors.any? %>
      <div id="error_expl" class="panel panel-danger">
        <div class="panel-heading">
          <h3 class="panel-title"><%= pluralize(@user.errors.count, "error") %> prohibited this user from being saved:</h3>
        </div>
        <div class="panel-body">
          <ul>
          <% @user.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
          </ul>
        </div>
      </div>
    <% end %>
    <div class="form-group">
      <%= f.label :email%>
      <%= f.email_field :email, :class => 'form-control' %>
    </div>
    <div class="form-group">
      <%= f.label :password %>
      <%= f.password_field :password, autocomplete: "off", :class => 'form-control' %>
    </div>

    <div class="form-group">
      <%= f.label :password_confirmation %>
      <%= f.password_field :password_confirmation, autocomplete: "off", :class => 'form-control' %>
    </div>
   
    <div class="form-group">
      <%= f.label :role%>
      <%= f.text_field :role, :class => 'form-control' %>
    </div>
    
    <div class="form-group">
      <%= f.label :address%>
      <%= f.text_field :address, :class => 'form-control',id:"autocomplete" , placeholder:"Enter your address",

              onFocus: "geolocate()" %>
    </div>
     

    <div class="form-group">
        <%= f.label :image, :class => 'control-label col-lg-2' %>
        <div class="col-lg-10">
          <%= f.file_field :image, :class => 'form-control' %>
        </div>
        <%=f.error_span(:image) %>
      </div>


    <div class="form-group">
      <%= f.submit nil, :class => 'btn btn-primary' %>
      <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
                  admins_users_path, :class => 'btn btn-default' %>
    </div>

  <% end %>
</div>

<script>
     // This example displays an address form, using the autocomplete feature
     // of the Google Places API to help users fill in the information.

     // This example requires the Places library. Include the libraries=places
     // parameter when you first load the API. For example:
     // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

     var placeSearch, autocomplete;
     var componentForm = {
       street_number: 'short_name',
       route: 'long_name',
       locality: 'long_name',
       administrative_area_level_1: 'short_name',
       country: 'long_name',
       postal_code: 'short_name'
     };

     function initAutocomplete() {
       // Create the autocomplete object, restricting the search to geographical
       // location types.
       autocomplete = new google.maps.places.Autocomplete(
           /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
           {types: ['geocode']});

       // When the user selects an address from the dropdown, populate the address
       // fields in the form.
       autocomplete.addListener('place_changed', fillInAddress);
     }

     function fillInAddress() {
       // Get the place details from the autocomplete object.
       var place = autocomplete.getPlace();

       for (var component in componentForm) {
         document.getElementById(component).value = '';
         document.getElementById(component).disabled = false;
       }

       // Get each component of the address from the place details
       // and fill the corresponding field on the form.
       for (var i = 0; i < place.address_components.length; i++) {
         var addressType = place.address_components[i].types[0];
         if (componentForm[addressType]) {
           var val = place.address_components[i][componentForm[addressType]];
           document.getElementById(addressType).value = val;
         }
       }
     }

     // Bias the autocomplete object to the user's geographical location,
     // as supplied by the browser's 'navigator.geolocation' object.
     function geolocate() {
       if (navigator.geolocation) {
         navigator.geolocation.getCurrentPosition(function(position) {
           var geolocation = {
             lat: position.coords.latitude,
             lng: position.coords.longitude
           };
           var circle = new google.maps.Circle({
             center: geolocation,
             radius: position.coords.accuracy
           });
           autocomplete.setBounds(circle.getBounds());
         });
       }
     }
   </script>
  <!--  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMof93EDC6Ig6LbVU5QunuMXgU5lNFzdc&libraries=places&callback=initAutocomplete"
       async defer></script> -->